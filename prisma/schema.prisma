// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BotChat {
  //  Common fields
  id                  Int                  @id @default(autoincrement())
  type                String
  is_enabled          Boolean              @default(true)
  telegram_id         Int                  @unique
  title               String
  TelegramPrivateChat TelegramPrivateChat?
  TelegramGroupChat   TelegramGroupChat?
  users               TelegramUser[]
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
}

model TelegramGroupChat {
  id          Int      @id @default(autoincrement())
  type        String
  chat        BotChat  @relation(fields: [bot_chat_id], references: [id])
  bot_chat_id Int      @unique
  telegram_id Int      @unique
  title       String
  permissions Json?
  photo       Json?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model TelegramPrivateChat {
  id                   Int      @id @default(autoincrement())
  type                 String
  chat                 BotChat  @relation(fields: [bot_chat_id], references: [id])
  bot_chat_id          Int      @unique
  telegram_id          Int      @unique
  has_private_forwards Boolean?
  photo                Json?
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
}

model TelegramUser {
  id           Int               @id @default(autoincrement())
  chats        BotChat[]
  telegram_id  Int               @unique
  first_name   String?
  last_name    String?
  username     String?
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt
  quotes       Quote[]           @relation("author")
  added_quotes Quote[]           @relation("quoted_by")
  pronoun      Pronoun?          @default(THEY)
  reports      ReportedMessage[] @relation("reporter")
  reported     ReportedMessage[] @relation("reported")
  nft_meanings NftDefinition[]   @relation("nft_meanings")
  BanReason    BanReason[]       @relation("ban_reason")
  bannings     Ban[]             @relation("bannings")
  banned       Ban[]             @relation("banned")
  ooced        Ooc[]             @relation("ooced")
  ooc          Ooc[]             @relation("ooc")
}

model Quote {
  id           Int          @id @default(autoincrement())
  key          String       @unique
  author       TelegramUser @relation("author", fields: [author_id], references: [id])
  author_id    Int
  quoted_by    TelegramUser @relation("quoted_by", fields: [quoted_by_id], references: [id])
  quoted_by_id Int
  message_id   Int          @unique
  message      Json
  chat_id      String
  uses         Int          @default(0)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now()) @updatedAt
}

// This table is used to store some metadata for the bot that would not fit a
// relational schema. Use value to save a string and json to save a json
model BotMeta {
  key   String  @unique
  value String?
  json  Json?
  count Int?    @default(0)

}

model ReportedMessage {
  id          Int          @id @default(autoincrement())
  reporter    TelegramUser @relation("reporter", fields: [reporter_id], references: [id])
  reporter_id Int
  reported    TelegramUser @relation("reported", fields: [reported_id], references: [id])
  reported_id Int
  message     Json
  message_id  Int          @unique
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model NftDefinition {
  id         String       @id
  definition String
  creator    TelegramUser @relation("nft_meanings", fields: [creator_id], references: [id])
  creator_id Int
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  uses       Int          @default(0)
}

model BanReason {
  id         String       @id
  reason     String
  creator    TelegramUser @relation("ban_reason", fields: [creator_id], references: [id])
  creator_id Int
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  uses       Int          @default(0)
  ban        Ban[]        @relation("reason")
  is_active  Boolean      @default(true)
}

model Ban {
  id          Int          @id @default(autoincrement())
  reason      BanReason    @relation("reason", fields: [reason_id], references: [id])
  reason_id   String
  reporter    TelegramUser @relation("bannings", fields: [reporter_id], references: [id])
  reporter_id Int
  reported    TelegramUser @relation("banned", fields: [reported_id], references: [id])
  reported_id Int
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model Ooc {
  id         Int          @id @default(autoincrement())
  message_id Int          @unique
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  quoted     TelegramUser @relation("ooced", fields: [quoted_id], references: [id])
  quoted_id  Int
  creator    TelegramUser @relation("ooc", fields: [creator_id], references: [id])
  creator_id Int
  image      String?
}

enum Pronoun {
  HE
  SHE
  THEY
}
